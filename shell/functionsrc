#!/usr/bin/env zsh

# ex - archive extractor
# usage: ex <file>
function ex() {
  local source=$1

  if [ -z "$source" ]; then
    echo "Usage: ex <file>"
    echo "Example: ex foo.tar.gz"
    return 1
  fi

  if [ -f "$source" ]; then
    case "$source" in
    *.7z) 7z x "$source" ;;
    *.bz2) bunzip2 "$source" ;;
    *.tar.bz2) tar xjf "$source" ;;
    *.tar.gz) tar xzf "$source" ;;
    *.tar.xz) tar xJf "$source" ;;
    *.rar) unrar x "$source" ;;
    *.gz) gunzip "$source" ;;
    *.tar) tar xf "$source" ;;
    *.tbz2) tar xjf "$source" ;;
    *.tgz) tar xzf "$source" ;;
    *.zip) unzip "$source" ;;
    *.Z) uncompress "$source" ;;
    *) echo "'"$source"' cannot be extracted via ex()" ;;
    esac
  else
    echo "'"$source"' is not a valid file"
  fi
}

function compress() {
  local source="$1"
  local format="$2"
  local out="$3"
  local output=""

  if [ -z "$out" ]; then
    output="${source%.*}.$format"
  else
    output="$out.$format"
  fi

  if [ -z "$source" ] || [ -z "$format" ]; then
    echo "Usage: compress <source> <format> <name>"
    echo "Example: compress /path/to/directory tar.gz"
    return 1
  fi

  case "$format" in
  7z)
    7z a "$output" "$source"
    ;;
  bz2)
    tar -cjvf "$output" "$source"
    ;;
  gz)
    gzip "$source"
    mv "$source.gz" "$output"
    ;;
  rar)
    rar a "$output" "$source"
    ;;
  tbz2)
    tar -xjf "$source"
    mv "$source.tar" "$output"
    ;;
  tgz)
    tar -czvf "$output" "$source"
    ;;
  tar)
    tar -cvf "$output" "$source"
    ;;
  tar.bz2)
    tar -cjvf "$output" "$source"
    ;;
  tar.gz)
    tar -czvf "$output" "$source"
    ;;
  tar.xz)
    tar -cJvf "$output" "$source"
    ;;
  zip)
    zip -r "$output" "$source"
    ;;
  Z)
    compress "$source"
    mv "$source.Z" "$output"
    ;;
  *)
    echo "Unsupported format: $format"
    return 1
    ;;
  esac

  echo "Compression complete: $output"
}

function pack_man() {
  if [ -x "$(command -v apk)" ]; then
    alias pkm='sudo apk add --no-cache '
  elif [ -x "$(command -v apt-get)" ]; then
    alias pkm='sudo apt install '
    alias rpkm='sudo apt remove'
    alias rpkmcleanup='sudo apt autoremove'
    alias packdate='sudo apt -y update && flatpak -y --noninteractive update'
  elif [ -x "$(command -v dnf)" ]; then
    alias pkm='sudo dnf install '
    alias rpkm='sudo dnf remove '
    alias rpkmcleanup='sudo dnf -y autoremove'
    alias packdate='sudo dnf -y upgrade --refresh'
  elif [ -x "$(command -v zypper)" ]; then
    alias pkm='sudo zypper install '
  elif [ -x "$(command -v paru)" ]; then
    alias pkm="paru -S "
    alias rpkm='paru -Rdd'
    alias pacman-update='sudo pacman-mirrors --geoip'
    alias rpkmcleanup='paru -Rns $(paru -Qdtq)' # Cleanup orphaned packages
    alias fixpacman="sudo rm /var/lib/pacman/db.lck"
    alias pkmgrade='paru --noconfirm -Syu && sudo flatpak -y --noninteractive update'
    # get fastest mirrors
    alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
    alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
    alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
    alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"
  elif [ -x "$(command -v nix-env)" ]; then
    # Nix package manager
    alias pkm='nix-env -iA'
    alias rpkm='nix-env -e'
    alias rpkmcleanup='nix-collect-garbage -d'
    alias packdate='nix-channel --update'
  else
    echo 'This Distro is not supported!'
  fi
}
pack_man

function build-cpp() {
  # Check if cmake is installed
  if ! command -v cmake &>/dev/null; then
    echo "cmake could not be found"
    return 1
  fi

  local build_target="build"
  local cmake_command="cmake"

  # If already inside the build directory, adjust build_target accordingly
  if [ "${PWD##*/}" = "build" ]; then
    build_target="."
  fi

  # Check if build directory exists, otherwise generate cmake build files
  if ! [[ -d "$build_target" ]]; then
    echo "Running $cmake_command -B $build_target..."
    $cmake_command -B $build_target
    if [ $? -ne 0 ]; then
      echo "Failed to run $cmake_command -B $build_target" >&2
      return 1
    fi
  fi

  echo "Building C++ project..."

  # Check if mold is installed and executable
  if [[ -x /usr/bin/mold || -x /bin/mold ]]; then
    mold --run cmake --build "$build_target" -- "$@"
  else
    cmake --build "$build_target" -- "$@"
  fi

  return 0
}

function reload() {
  case "$SHELL" in
  */bash)
    source ~/.bashrc
    ;;
  */zsh)
    source ~/.zshrc 2>/dev/null
    ;;
  *)
    echo "You are using another shell: $SHELL."
    ;;
  esac
}

function plugins() {
  case "$SHELL" in
  */zsh)
    vim ~/.config/zsh/plugins_config.zsh
    ;;
  *)
    echo "No plugin manager defined for: $SHELL."
    ;;
  esac
}

function completions() {
  case "$SHELL" in
  */zsh)
    if [[ -d ~/.completions ]]; then
      # Enable nullglob to prevent "no matches found" errors
      setopt nullglob
      # Source Zsh completions
      for file in ~/.completions/*.zsh; do
        [[ -f $file ]] && source "$file"
      done

      # Source Bash completions (if any)
      for file in ~/.completions/*.bash; do
        [[ -f $file ]] && source "$file"
      done
      # Disable nullglob to avoid affecting the rest of the shell
      unsetopt nullglob
    fi
    ;;
  */bash)
    if [[ -d ~/.completions ]]; then
      # Source Bash completions
      shopt -s nullglob
      for file in ~/.completions/*.bash; do
        [[ -f $file ]] && source "$file"
      done
      shopt -u nullglob
    fi
    ;;
  *) ;;
  esac
}

completions
