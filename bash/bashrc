
### Functions for aliasrc

# # ex - archive extractor
# # usage: ex <file>
function ex ()
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1   ;;
            *.tar.gz)    tar xzf $1   ;;
            *.tar.xz)    tar xJf $1   ;;
            *.bz2)       bunzip2 $1   ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1    ;;
            *.tar)       tar xf $1    ;;
            *.tbz2)      tar xjf $1   ;;
            *.tgz)       tar xzf $1   ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1;;
            *.7z)        7z x $1      ;;
            *)           echo "'$1' cannot be extracted via ex()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function pack() {
    local source="$1"
    local format="$2"
    local output="${source%.*}.$format"

    if [ -z "$source" ] || [ -z "$format" ]; then
        echo "Usage: compress <source> <format>"
        echo "Example: compress /path/to/directory zip"
        return 1
    fi

    case "$format" in
        zip)
            zip -r "$output" "$source"
            ;;
        tar)
            tar -cvf "$output" "$source"
            ;;
        gz)
            tar -czvf "$output" "$source"
            ;;
        bz2)
            tar -cjvf "$output" "$source"
            ;;
        *)
            echo "Unsupported format: $format"
            return 1
            ;;
    esac

    echo "Compression complete: $output"
}

function pack_man(){
    if [ -x "$(command -v apk)" ];then
        alias pkm='sudo apk add --no-cache '
        elif [ -x "$(command -v apt)" ];then
        alias pkm='sudo apt install '
        alias rpkm='sudo apt remove'
        alias cleanup='sudo apt autoremove'
        alias pkmgrade='sudo apt -y update && flatpak -y --noninteractive update'
        elif [ -x "$(command -v dnf)" ];then
        alias pkm='sudo dnf install '
        alias rpkm='sudo dnf remove '
        alias cleanup='sudo dnf -y autoremove'
        alias pkmgrade='sudo dnf -y upgrade --refresh'
        elif [ -x "$(command -v zypper)" ];then
        alias pkm='sudo zypper install '
        elif [ -x "$(command -v paru)" ];then
        alias pkm="paru -S "
        alias rpkm='paru -Rdd'
        alias pacman-update='sudo pacman-mirrors --geoip'
        alias cleanup='sudo pacman -Rns (pacman -Qtdq) && paru -Yc' # Cleanup orphaned packages
        alias fixpacman="sudo rm /var/lib/pacman/db.lck"
        alias pkmgrade='paru --noconfirm -Syu && sudo flatpak -y --noninteractive update'
        # get fastest mirrors
        alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
        alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
        alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
        alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"
        elif [ -x "$(command -v nix-env)" ]; then
        # Nix package manager
        alias pkm='nix-env -iA'
        alias rpkm='nix-env -e'
        alias rpkmcleanup='nix-collect-garbage -d'
        alias packdate='nix-channel --update'
    else
        echo 'This Distro is not supported!'
    fi
}

function new(){
  # Find directories in both the regular home directory and specific home directory
  directories=$(fd -t d -E .git -E node_modules --exclude Downloads --base-directory ~)
  my_home=$(echo ~)
  directories+=" $my_home"

  # Use fzf to select a directory from the list
  dir=$(echo "$directories" | tr ' ' '\n' | fzf)
  # dir=$(fd -t d -E .git -E node_modules --exclude Downloads --base-directory ~--full-path '$HOME')
  if [ -n "$dir" ]; then
    cd ~/"$dir"
    if [ -n "$TMUX" ]; then
      tmux rename-window "$(basename "$dir")"
    fi
  fi
}

function cpp-build()
{
    # check if we are in a dir called build
    dir=$(basename $(pwd))

    # Check if current directory is named "build"
    if [ "$(basename "$(pwd)")" = "build" ]; then
        :
    elif [ -d "build" ]; then
        cd build
    elif [ -f "CMakeLists.txt" ]; then
        mkdir build
        cd build
    else
        echo "No C++ project found in this directory!"
        return
    fi

    # Check if cmake is installed
    if ! command -v cmake &> /dev/null
    then
        echo "cmake could not be found"
        return
    fi

    cmake ..

    local prefix=''
    #check if mold is installed
    if command -v mold &> /dev/null; then
        prefix="mold --run"
    else
        echo "Warning: mold not found at $mold_path. Running build without mold."
        return
    fi

    if [ -f CMakeCache.txt ]; then
        $prefix cmake --build . -- "$@"
    elif [ -f Makefile ]; then
        $prefix make -j $( nproc ) "$@"
    elif [ -f build.ninja ]; then
        $prefix ninja "$@"
    else
        echo 'Could not determine a suitable build command!' 1>&2
    fi
}

pack_man

export PATH="/home/flmr799e/.npm-global/lib/node_modules/.bin:$PATH"

export EDITOR=nvim
export VISUAL=nvim
### End of functions

alias reload='source ~/.bashrc'

# Load device specific configurations
[ -f "$HOME/.device_config" ] && source "$HOME/.device_config"

# Load aliases and shortcuts if existent.
[ -f "$HOME/.aliasrc" ] && source "$HOME/.aliasrc"

# cargo env
[ -f ~/.cargo/env ] && source $HOME/.cargo/env

#starship
eval "$(starship init bash)"

