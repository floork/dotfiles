#!/bin/env bash

set -euo pipefail

function update_symlinks() {
	declare -A symlinks=(
		# SHELL
		# # bash
		[".bashrc"]="$script_dir/bash/bashrc"
		# # fish
		[".config/fish"]="$script_dir/fish"
		# # zsh
		[".config/zsh"]="$script_dir/zsh"
		[".zshrc"]="$script_dir/zsh/zshrc"
		# # shared resources
		[".aliasrc"]="$script_dir/shell/aliasrc"
		[".functionsrc"]="$script_dir/shell/functionsrc"

		# GIT
		[".gitconfig"]="$script_dir/git/gitconfig"
		[".config/gh"]="$script_dir/gh"

		# CLI
		# # tmux
		[".tmux.conf"]="$script_dir/tmux/tmux.conf"
		# # neofetch
		[".config/neofetch"]="$script_dir/neofetch"
		# # starship
		[".config/starship.toml"]="$script_dir/starship/starship.toml"

		# Desktop applications
		[".config/dunst"]="$script_dir/dunst"
		[".config/hypr"]="$script_dir/hypr"
		[".config/Thunar"]="$script_dir/Thunar"
		[".config/waybar"]="$script_dir/waybar"
		[".config/wofi"]="$script_dir/wofi"
		# # terminal
		[".config/warp-terminal"]="$script_dir/warp-terminal"
		[".config/wezterm"]="$script_dir/wezterm"
	)

	create_symlink() {
		local source=$1
		local target=$2

		if [ -e "$target" ]; then
			echo "Symlink for $source already exists."
		else
			ln -s "$source" "$target" || {
				echo "Failed to create symlink for $source"
				exit 1
			}
			echo "Symlink for $source created."
		fi
	}

	for source in "${!symlinks[@]}"; do
		create_symlink "${symlinks[$source]}" "$HOME/$source"
	done
}

function update_dotfiles() {
	git pull --autostash --rebase || {
		echo "Failed to update dotfiles"
		exit 1
	}
}

function update_nvim() {
	NVIM_CONFIG_DIR="$HOME/.config/nvim"
	echo "Updating nvim configuration..."
	if ! [[ -d "$NVIM_CONFIG_DIR" ]]; then
		git clone https://github.com/floork/nvim.git "$NVIM_CONFIG_DIR" || {
			echo "Failed to clone nvim configuration"
			exit 1
		}
		return
	fi

	cd "$NVIM_CONFIG_DIR" || exit
	git pull || {
		echo "Failed to update nvim configuration"
		exit 1
	}
	cd "$dir_from_cmd_source" || exit
}

function update_user_bin_directory() {
	BIN_DIR="$HOME/.local/bin"
	mkdir -p "$BIN_DIR"

	for file in "$dir_from_cmd_source/bin"/*; do
		ln -sf "$file" "$BIN_DIR/" || {
			echo "Failed to update user bin directory"
			exit 1
		}
	done
}

function update_wallpapers() {
	WALLPAPERS_DIR="$HOME/.config/wallpapers"
	if [ -d "$WALLPAPERS_DIR" ]; then
		cd "$WALLPAPERS_DIR" || exit
		git pull || {
			echo "Failed to update wallpapers"
			exit 1
		}
		cd "$dir_from_cmd_source" || exit
	fi
}

function main() {
	local dir_from_cmd_source
	local dotfiles_dir

	# Get the current directory
	dir_from_cmd_source=$(pwd)

	# Change to the dotfiles directory
	dotfiles_dir="$HOME/dotfiles/"
	cd "$dotfiles_dir" || exit

	# Update the repository
	update_dotfiles
	update_nvim
	update_user_bin_directory

	# Return to the original directory
	cd "$dir_from_cmd_source" || exit
}

main
