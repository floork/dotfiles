
# Enable colors and change prompt:
autoload -U colors && colors
PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%~%{$fg[red]%}]%{$reset_color%}$%b "

export PATH=$PATH:$HOME/.local/bin:$HOME/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/games:/usr/local/games:/snap/bin

export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.npm-global/bin:$PATH"

export PATH="$HOME/.deno/bin:$PATH"

# Custom Variables
export EDITOR=nvim
export VISUAL=nvim

# cargo env
[ -f ~/.cargo/env ] && source $HOME/.cargo/env

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
if ! command -v pyenv &> /dev/null
then
    curl https://pyenv.run | bash
fi

# History in cache directory:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.cache/zshhistory
setopt appendhistory

# Basic auto/tab complete:
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots)               # Include hidden files.
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' # for caseinsensite tab completion

# start tmux
[ -z "$TMUX" ] && exec tmux


# Custom ZSH Binds

# Navigation:
bindkey "\e[1;5D" backward-word        # Ctrl + Left Arrow: Move backward one word
bindkey "\e[1;5C" forward-word         # Ctrl + Right Arrow: Move forward one word

# History Search:
bindkey "^[[A" history-beginning-search-backward   # Up Arrow: Search backward through history
bindkey "^[[B" history-beginning-search-forward    # Down Arrow: Search forward through history
bindkey "^[[A" history-search-backward             # Up Arrow: Search backward through history (alternate)
bindkey "^[[B" history-search-forward              # Down Arrow: Search forward through history (alternate)

# Text Manipulation:
bindkey "\e[3;5~" kill-word               # Ctrl + Del: Delete word after cursor
bindkey "\C-_"    backward-kill-word      # Ctrl + Backspace: Delete word before cursor
bindkey "\e[3~" delete-char                # Delete: Delete character under cursor

# Line Navigation:
bindkey "\e[H"  beginning-of-line         # Home: Move to beginning of line
bindkey '^A' beginning-of-line            # Ctrl + A: Move to beginning of line
bindkey "\e[F"  end-of-line               # End: Move to end of line
bindkey '^E' end-of-line                  # Ctrl + E: Move to end of line

# ex - archive extractor
# usage: ex <file>
function ex ()
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1   ;;
            *.tar.gz)    tar xzf $1   ;;
            *.tar.xz)    tar xJf $1   ;;
            *.bz2)       bunzip2 $1   ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1    ;;
            *.tar)       tar xf $1    ;;
            *.tbz2)      tar xjf $1   ;;
            *.tgz)       tar xzf $1   ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1;;
            *.7z)        7z x $1      ;;
            *)           echo "'$1' cannot be extracted via ex()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function gt-push() {
    git add .
    git commit -m "$*"
    git pull
    git push
}

function pack_man(){
    if [ -x "$(command -v apk)" ];then
        alias pkm='sudo apk add --no-cache '
        elif [ -x "$(command -v apt-get)" ];then
        alias pkm='sudo apt install '
        alias rpkm='sudo apt remove'
        alias rpkmcleanup='sudo apt autoremove'
        alias packdate='sudo apt -y update && flatpak -y --noninteractive update'
        elif [ -x "$(command -v dnf)" ];then
        alias pkm='sudo dnf install '
        alias rpkm='sudo dnf remove '
        alias rpkmcleanup='sudo dnf -y autoremove'
        alias packdate='sudo dnf -y upgrade --refresh'
        elif [ -x "$(command -v zypper)" ];then
        alias pkm='sudo zypper install '
        elif [ -x "$(command -v paru)" ];then
        alias pkm="paru -S "
        alias rpkm='paru -Rdd'
        alias pacman-update='sudo pacman-mirrors --geoip'
        alias rpkmcleanup='paru -Rns $(paru -Qdtq)' # Cleanup orphaned packages
        alias fixpacman="sudo rm /var/lib/pacman/db.lck"
        alias pkmgrade='paru --noconfirm -Syu && sudo flatpak -y --noninteractive update'
        # get fastest mirrors
        alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
        alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
        alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
        alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"
        elif [ -x "$(command -v nix-env)" ]; then
        # Nix package manager
        alias pkm='nix-env -iA'
        alias rpkm='nix-env -e'
        alias rpkmcleanup='nix-collect-garbage -d'
        alias packdate='nix-channel --update'
    else
        echo 'This Distro is not supported!'
    fi
}

function frm {
    read -p "Are you sure you want to delete? (y/n): " -k response
    if [[ "$response" == "y" || "$response" == "Y" ]]; then
        rm -rf "$@"
    else
        echo "Aborted."
    fi
}

function build-cpp() {
    # Check if current directory is named "build"
    if [[ $(basename "$(pwd)") != "build" ]]; then
        if [[ -d "build" ]]; then
            cd build || return
        elif [[ -f "CMakeLists.txt" ]]; then
            mkdir build && cd build || return
        else
            echo "No C++ project found in this directory!"
            return
        fi
    fi

    # Check if cmake is installed
    if ! command -v cmake &> /dev/null; then
        echo "cmake could not be found"
        return
    fi

    cmake ..

    # check if mold is installed is missing because
    # zsh is not able to find the mold command
    if [[ -f CMakeCache.txt ]]; then
        mold --run cmake --build . -- "$@"
    elif [[ -f Makefile ]]; then
        mold --run make -j $(nproc) "$@"
    elif [[ -f build.ninja ]]; then
        mold --run ninja "$@"
    else
        echo 'Could not determine a suitable build command!' >&2
    fi
}

function kill-tmux-sessions() {
  if [ -n "$TMUX" ]; then
    tmux list-sessions | grep -v attached | awk 'BEGIN{FS=":"}{print $1}' | xargs -n 1 tmux kill-session -t || echo No sessions to kill
  else
    echo "Not in a tmux session"
  fi
}

function new(){
  dir=$(fd -t d -E .git -E node_modules --exclude Downloads --base-directory ~ | fzf)
  if [ -n "$dir" ]; then
    cd ~/"$dir"
    if [ -n "$TMUX" ]; then
      tmux rename-window "$(basename "$dir")"
    fi
  fi
}

pack_man

### End of functions

# Load device specific configurations
[ -f "$HOME/.device_config" ] && source "$HOME/.device_config"

# Load aliases and shortcuts if existent.
[ -f "$HOME/.aliasrc" ] && source "$HOME/.aliasrc"

# special aliases
alias reload='source ~/.zshrc && clear'
alias frm=frm
alias ex=ex
alias plugins='vim ~/.config/zsh/plugins_config.zsh'
alias tmuxClean=kill_tmux_sessions

# plugins for zsh
[ -f "$HOME/.config/zsh/plugins_config.zsh" ] && source "$HOME/.config/zsh/plugins_config.zsh"

# starship
eval "$(starship init zsh)"
